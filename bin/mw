#!/usr/bin/env sh
# shellcheck disable=2015

out() { printf '\033[1;34m-> \033[m%s\n' "$@" ;}
err() { printf '\033[1;31m!> \033[m%s\n' "$@" >&2 ;}
die() { printf '\033[1;31m!> \033[m%s\n' "$@" >&2 ; exit 1;}

pm_ask() {
    stty -echo
    printf 'Enter your password: ' ; read -r pass
    printf '\nEnter your password again: ' ; read -r pass2
    printf '\n'
    stty echo
    [ "$pass" = "$pass2" ] && { printf '%s' "$pass" | pm a "$1" ;} || {
        err "Passwords don't match"
        return 1
    }
}

! command -v pm >/dev/null && die "pm must be installed for mutt-wizard to work"
! command -v mbsync >/dev/null && die "mbsync must be installed to run mutt-wizard"

prefix="/usr/local"
muttdir="$HOME/.config/mutt"            # Main mutt config location
accdir="$muttdir/accounts"              # Directory for account settings
maildir="$HOME/.local/share/mail"       # Location of mail storage
namere="^[a-z_][a-z0-9_-]*$"            # Regex to ensure viable username
emailre=".\+@.\+\\..\+"                 # Regex to confirm valid email address
muttshare="$prefix/share/mutt-wizard"
mbsyncrc="$HOME/.mbsyncrc"
mwconfig="$muttshare/mutt-wizard.muttrc"
cachedir="$HOME/.cache/mutt-wizard"
muttrc="$muttdir/muttrc"
msmtprc="$HOME/.config/msmtp/config"
ssltype="IMAPS"

for x in \
    "/etc/ssl/certs/ca-certificates.crt" \
    "/etc/pki/tls/certs/ca-bundle.crt" \
    "/etc/ssl/ca-bundle.pem" \
    "/etc/pki/tls/cacert.pem" \
    "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \
    "/etc/ssl/cert.pem" \
    "/usr/local/share/ca-certificates/"
do
        [ -f "$x" ] && sslcert="$x" && break
done || die "CA Certificate not found. Please install one or link it to /etc/ssl/certs/ca-certificates.crt"

getaccounts() { accounts="$(find "$accdir" -type f -name '?-*.muttrc' | sed "s/^\/.*\///;s/-/: /;s/\..*//" | sort -n)" ;}
list() { getaccounts && [ "$accounts" ] && echo "$accounts" ;}

getprofiles() { \
        unset msmtp_header msmtp_profile mutt_profile mbsync_profile
        out "Creating profiles for $title"
msmtp_header="defaults
auth    on
tls     on
tls_trust_file  $sslcert
logfile ~/.config/msmtp/msmtp.log
"
msmtp_profile="account $title
host $smtp
port $sport
from $fulladdr
user $login
passwordeval \"pm s mutt-wizard-$title\"
$starttlsoff
"
mbsync_profile="IMAPStore $title-remote
Host $imap
Port  $iport
User $login
PassCmd \"pm s mutt-wizard-$title\"
SSLType $ssltype
CertificateFile $sslcert

MaildirStore $title-local
Subfolders Verbatim
Path ~/.local/share/mail/$title/
Inbox ~/.local/share/mail/$title/INBOX
Flatten .

Channel $title
Expunge Both
Master :$title-remote:
Slave :$title-local:
Patterns * !\"[Gmail]/All Mail\"
Create Both
SyncState *
MaxMessages $maxmes
ExpireUnread no
# End profile
"

[ "$accounttype" = "offline" ] &&
mutt_profile="# vim: filetype=neomuttrc
# muttrc file for account $title
set realname = \"$realname\"
set from = \"$fulladdr\"
set sendmail = \"msmtp -a $title\"
alias me $realname <$fulladdr>
set folder = \"$maildir/$title\"
set header_cache = $cachedir/$title/headers
set message_cachedir = $cachedir/$title/bodies
set mbox_type = Maildir

bind index,pager gg noop
bind index,pager g noop
bind index,pager M noop
bind index,pager C noop
bind index gg first-entry
macro index o \"<shell-escape>mailsync -V $title<enter>\" \"run mbsync to sync $title\"
unmailboxes *
" ||
mutt_profile="# vim: filetype=neomuttrc
# muttrc file for account $title
set realname = \"$realname\"
set from = \"$fulladdr\"
set sendmail = \"$prefix/bin/msmtp -a $title\"
alias me $realname <$fulladdr>
set folder = \"imaps://$fulladdr@$imap:$iport\"
set imap_user = \"$login\"
set header_cache = $cachedir/$title/headers
set message_cachedir = $cachedir/$title/bodies
set imap_pass = \"\`pm s mutt-wizard-$title\`\"

set mbox_type = Maildir
set ssl_starttls = yes
set ssl_force_tls = yes

bind index,pager gg noop
bind index,pager g noop
bind index,pager M noop
bind index,pager C noop
bind index gg first-entry
unmailboxes *
"
out "DONE."
}

askinfo() { \
    out "Insert the email address that you want to configure for mutt"
    printf 'Email:\t'
    read -r fulladdr
    while ! echo "$fulladdr" | grep -q "$emailre" ; do
        err "That is not a valid email address, please retype the desired email."
        printf 'Email:\t'
        read -r fulladdr
    done
    domain="$(echo "$fulladdr" | sed "s/.*@//")"
    out "Searching for $domain in 'domains.csv'"
    serverinfo="$(grep "^$domain" "$muttshare/domains.csv" 2>/dev/null)"
    if ! [ "$serverinfo" ]; then
        out "Your email domain is not in mutt-wizard's database yet."
        out "Insert the IMAP server for your email provider (excluding the port number)"
        read -r imap
        out "What is your server's IMAP port number? (Usually something like 993)"
        read -r iport
        out "Insert the SMTP server for your email provider (excluding the port number)"
        read -r smtp
        out "What is your server's SMTP port number? (Usually 587 or 465)"
        read -r sport
    else
        IFS=, read -r service imap iport smtp sport <<EOF
$serverinfo
EOF
        out "Congrats!" "Server info has automatically been found, so you won't have to look anything up!" \
            "IMAP server: $imap" \
            "IMAP port: $iport" \
            "SMTP server: $smtp" \
            "SMTP port: $sport" \
            "This data will be used by the wizard."
        [ "$service" = "gmail.com" ] && out "REMEMBER: Gmail users must enable \"less secure\" (third-party) applications first for the sync to work:" "https://support.google.com/accounts/answer/6010255"
        [ "$sport" = 465 ] && starttlsoff="tls_starttls off"
    fi
    out "Enter the full name you want to be identified by on this account."
    printf '\tReal name: '
    read -r realname
    out "Enter a short, one-word identifier for this email account that will distinguish them from any other accounts you add"
    printf '\tAccount name: '
    read -r title
    while ! echo "$title" | grep -q "$namere" || ls -1 "$accdir"/[0-9]"-$title.muttrc" >/dev/null 2>&1; do
        err "Try again. Pick a nickname that is one word only including lowercase letters and _ or - and that you have not used before."
        printf '\tAccount name: '
        read -r title
    done
    out "If your account has a special username different from your address, insert it now. Otherwise leave this prompt totally blank." "Most accounts will not have a separate login, so you should probably leave this blank."
    printf 'Login(?): '
    read -r login
    [ "$login" ] || login="$fulladdr"
    [ "$accounttype" = "offline" ] && printf "If you want to limit the number of messages kept offline to a number, enter that number below. If you do not want to limit your mail and would like \`mbsync\` to sync all mail, press enter without typing a number.\\n\t" && read -r maxmes
    echo "$maxmes" | grep "[1-9]" >/dev/null || maxmes="0"
    getpass
    getprofiles
    mkdir -p "$muttdir" "$accdir" "$cachedir/$title/bodies" "$HOME/.config/msmtp"
    getaccounts
    for x in $(seq 1 9); do echo "$accounts" | grep "$x" >/dev/null 2>&1 || { export idnum="$x"; break ;}; done
    [ ! -f "$msmtprc" ] && echo "$msmtp_header" > "$msmtprc"
    echo "$msmtp_profile" >> "$msmtprc"
    command -V apt-get >/dev/null 2>&1 && ln -s "$msmtprc" "$HOME/.msmtprc" 2>/dev/null
    echo "$mutt_profile" > "$accdir/$idnum-$title.muttrc"
    echo "$mbsync_profile" >> "$mbsyncrc"
    notmuchauto
    [ ! -f "$muttrc" ] && echo "# vim: filetype=neomuttrc" > "$muttrc" && echo "muttrc created."
    ! grep "^source.*mutt-wizard.muttrc" "$muttrc" >/dev/null && echo "source $mwconfig # mw-autogenerated" >> "$muttrc"
    ! grep "^source.*.muttrc" "$muttrc" | grep -v "$mwconfig" >/dev/null && echo "source $accdir/$idnum-$title.muttrc # mw-autogenerated" >> "$muttrc"
    echo "macro index,pager i$idnum '<sync-mailbox><enter-command>source $accdir/$idnum-$title.muttrc<enter><change-folder>!<enter>;<check-stats>' \"switch to $fulladdr\" # mw-autogenerated" >> "$muttrc"
}

getpass() {
    while : ; do
        pm d "mutt-wizard-$title"
        pm_ask "mutt-wizard-$title" && break
    done
}

formatShortcut() {
        while read -r data; do
            cat <<EOF>>"$accdir/$idnum-$title.muttrc"
macro index,pager g$1 "<change-folder>$data<enter>" "go to $2" # mw-autogenerated
macro index,pager M$1 ";<save-message>$data<enter>" "move mail to $2" # mw-autogenerated
macro index,pager C$1 ";<copy-message>$data<enter>" "copy mail to $2" # mw-autogenerated
EOF
        done
}

tryconnect() {
    mkdir -p "$maildir/$title"
    if mailboxes="$(mbsync -l "$title" | sed 's/\//./')" >/dev/null 2>&1 && [ "$mailboxes" ]; then
        [ "$accounttype" = "online" ] && sed "/IMAPStore $title-remote$/,/# End profile/d" "$mbsyncrc" > _ ; mv _ "$mbsyncrc"
        printf "\033[32mMailboxes detected.\033[0m\\n"
        echo "$mailboxes" | xargs -I {} mkdir -p "$maildir/$title/{}"
        return 0
    else
        printf "\033[31m\033[31mLog-on not successful.\033[0m\\nIt seems that either you inputted the wrong password or server settings, or there are other requirements for your account out of the control of mutt-wizard.\\n"
        return 1
    fi ;}

finalize() { \
    boxes="$(find "$maildir/$title/" -mindepth 1 -maxdepth 1 | sed "s/\ /\\\ /g;s/^.*\//=/")"
    [ "$boxes" ] || {
        err "No local mailboxes have been detected for $title" \
            "This means that mbsync has not been successfully run." \
            "Run mbsync, and if it has an error, be sure to check your password and" "server settings manually if needbe."
        return
    }
    printf "Setting default mailboxes for your Inbox, Sent, Drafts and Trash in mutt...\\n"
    spoolfile=$(echo "$boxes" | grep -i -m 1 inbox | sed 's/=/+/g')
    record=$(echo "$boxes" | grep -i -m 1 sent | sed 's/=/+/g')
    postponed=$(echo "$boxes" | grep -i -m 1 draft | sed 's/=/+/g')
    trash=$(echo "$boxes" | grep -i -m 1 trash | sed 's/=/+/g')
    sed "/^mailboxes\|^set record\|^set postponed\|^set trash\|^set spoolfile/d" "$accdir/$idnum-$title.muttrc" > _ ; mv _ "$accdir/$idnum-$title.muttrc"
    { echo "set spoolfile = \"$spoolfile\""; echo "set record = \"$record\""; echo "set postponed = \"$postponed\""; echo "set trash = \"$trash\""; } >> "$accdir/$idnum-$title.muttrc"
    echo "mailboxes $(echo "$boxes" | sed -e "s/^\|$/\"/g" | tr "\n" " ")" >> "$accdir/$idnum-$title.muttrc"
    out "Setting up your keyboard shortcuts for jumping between mailboxes..."
    sed "/# mw-autogenerated/d" "$accdir/$idnum-$title.muttrc" > _ ; mv _ "$accdir/$idnum-$title.muttrc" 
    echo "$boxes" | grep -i inbox | sed 1q | formatShortcut i inbox
    echo "$boxes" | grep -i sent | sed 1q | formatShortcut s sent
    echo "$boxes" | grep -i draft | sed 1q | formatShortcut d drafts
    echo "$boxes" | grep -i trash | sed 1q | formatShortcut t trash
    echo "$boxes" | grep -i spam | sed 1q | formatShortcut S spam
    echo "$boxes" | grep -i junk | sed 1q | formatShortcut j junk
    echo "$boxes" | grep -i archive | sed 1q | formatShortcut a archive
    [ "$accounttype" = "offline" ] && printf "All done.\\n\033[33mYou should now be able to run \`\033[32mmbsync %s\033[33m\` to begin to download your mail.\033[0m\\n" "$title"
    command -V urlview >/dev/null 2>&1 && [ ! -f "$HOME/.urlview" ] && echo "COMMAND \$BROWSER" > "$HOME/.urlview"
    return 0
}

confirm() {
    printf '\033[1;33m?> \033[mDo you want to %s? [y/N] ' "$@"
    read -r ans
    case "$ans" in [Yy]*) ;; *) return 1 ;; esac
    return 0
}

pick() { printf "Select an account to %s:\\n" "$1"
    list
    read -r input
    [ "$input" ] || return 1
    title="$(echo "$accounts" | grep "$input" | awk '{print $2}')"
    [ "$title" ] || { err "Invalid response." && return 1 ;}
    return 0 ;}

delete() {
    sed "/IMAPStore $title-remote$/,/# End profile/d" "$mbsyncrc" > _ ; mv _ "$mbsyncrc"
    rm -rf "${cachedir:?}/${title:?}" "$accdir/"[1-9]"-$title.muttrc"
    sed "/[0-9]-$title.muttrc/d" "$muttrc" > _ ; mv _ "$muttrc"
    sed "/account $title/,/^\(\s*$\|account\)/d" "$msmtprc" > _ ; mv _ "$msmtprc"
}

asktype() {
    confirm "keep your mail for this account offline with mbsync?" && accounttype="offline" || accounttype="online"
}

purge() { confirm "delete all account data" || exit
    rm -rf "$mbsyncrc" "$accdir" "$HOME/.config/msmtp" "$cachedir"
    crontab -l | sed '/mailsync/d' | crontab - >/dev/null
    out "All configs and account settings have been purged."
    sed "/\# mw-autogenerated/d" "$muttrc" > _ ; mv _ "$muttrc"
}

notmuchauto() {
    [ "$NOTMUCH_CONFIG" ] || NOTMUCH_CONFIG="$HOME/.notmuch-config"
    [ -f "$NOTMUCH_CONFIG" ] && return 0
    cat <<EOF > "$NOTMUCH_CONFIG"
nmbasic="[database]
path=$maildir
[user]
name=$realname
primary_email=$fulladdr
[new]
tags=unread;inbox;
ignore=
[search]
exclude_tags=deleted;spam;
[maildir]
synchronize_flags=true
[crypto]
gpg_path=$GPG"
EOF
}

trap 'printf "\n" ; exit 1' INT

case "$1" in
    a|add) asktype && askinfo && tryconnect && finalize || delete ;;
    c|change) pick "change the password of" && getpass ;;
    d|delete) pick delete && confirm "delete the \`$title\` profile" && delete ;;
    l|ls) list ;;
    p|purge) purge ;;
    *) out \
              "mw [a|c|d|l|p]" "" \
              "mutt-wizard, auto-configure email accounts for mutt" \
              "including downloadable mail with 'isync'" ""\
              "Options:" \
              "  add:     Add and autoconfigure an email address (9 max.)" \
              "  change:  Pick an account to change the password" \
              "  delete:  Pick an account to delete" \
              "  ls:      List configured accounts" \
              "  purge:   Delete all accounts and settings" ""\
              "NOTE: Once at least one account is added, you can run" \
              "'mbsync -a' to begin downloading mail." ;;
esac
